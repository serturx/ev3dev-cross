    yet another lexical preprocessor
     __    __    _____ _____
    /\ \  /\ \  /\  _  \  _  \
    \ \ \_\/  \_\/  \_\ \ \_\ \
     \ \__  /\____/\  __/\  __/
      \/_/\_\/___/\ \_\/\ \_\/
         \/_/      \/_/  \/_/

    ($($\y:u.\m.\...(m y($\C.\p.(r)e p)($\ro.(ce)s)))so r)
    ___             ______________________________
    ___ WHAT IS IT? ______________________________

    yupp is a lexical preprocessor which implements the macro language
    with Lisp-like Polish notation syntax in fully parenthesized form.
    yupp is intended to transform C programs before they are compiled.
    It can also be useful for more general purposes. For example, it
    would be possible to use macros in Python code if "yupp" package
    was installed.

    yupp allows to generate a well-formatted readable text. Special
    attention is paid to providing complete diagnostic information and
    navigational capabilities.

    Embedding of preprocessor expressions into source code occurs by
    using an application form, e.g. ($e).

    Please find a commented example of **yupp** using:

        https://github.com/in4lio/yupp/blob/master/doc/glance.md

    ___        ___________________________________
    ___ SYNTAX ___________________________________

    The main syntactic categories of the macro language are a list,
    an application and a lambda expression.

    A list is a sequence of expressions separated by blanks and enclosed
    in parentheses.

    <list> ::= '(' { <expr> } ')'

    e.g. (0.5 "string" atom)

    An application is an applying a function to arguments, it syntactically
    differs from a list in presence of the dollar sign after the open
    parenthesis.

    <application> ::= '($' <function> { <argument> } ')'

    e.g. ($add 2 3)

    A lambda expression is an anonymous function, it consists of a sequence
    of parameters and a function body.

    <lambda> ::= <param> { <param> } <expr>
    <param>  ::= '\' <atom> [ ':' <default> ] '.'

    e.g. \val.($sub val 1)

    Syntactic forms can be nested within each other but, as mentioned above,
    only an application can be embedded into source code directly.

    The following examples show various syntactic constructs of the macro
    language. You can try them using yupp Web Console:

        http://yup-py.appspot.com/

    ($! this is a comment, won't be saved in the generated text )

    ($! binding of an atom (identifier) with a value – ($set <atom> <expr>) )

        ($set a 'A')

    ($! an atom binding with a list )

        ($set abc (a 'B' 'C' 'D' 'E'))

    ($! binding of an atom with a lambda is a function definition
        – ($set <atom> <lambda>) )

        ($set inc \val.($add val 1))

    ($! application of a number is subscripting )

        ($2 miss miss HIT miss)

    HIT

    ($! getting the specific element of a list– ($<number> <list>) )

        ($0 abc)

    'A'

    ($! application of a list is a "for each" loop – ($<list> <functions>) )

        ($(0 1 2) \i.($inc i))

    123

    ($! embedding of one list into another – *<list> )

        ($set mark (5 4 *(3 2) 1))

    ($! an infix expression in Python – {<python>} )

        ($set four { 2 + 2 })

    ($! an infix expression straight into source code – (${} <python>) )

        foo = (${} sqrt(four) * 5.0);

    foo = 10.0;

    ($! a conditional expression – <consequent> ? <condition> | <alternative> )

        ($set fact \n.($ 1 ? { n == 0 } | { ($fact { n - 1 }) * n }))
        ($fact 10)

    3628800

    ($! enclosing of source code into an application – ($code <text>) )

        ($abc \ch.($code putchar(($ch));))

    putchar('A'); putchar('B'); putchar('C'); putchar('D'); putchar('E');

    ($! source code enclosing with the square brackets – [<text>] )

        ($mark \i.[($i), ])

    5, 4, 3, 2, 1,

    ($! a function (lambda) parameter with a default value
        – \<atom>:<default>.<expr> )

        ($set if \cond.\then:[].\else:[].($ then ? cond | else ))

    ($! a named argument – ($<function> \<atom> <argument>) )

        ($if { four != 4 } \else OK )

    OK

    ($! a macro definition – ($macro <atom> (<params>) <text>) )

        ($macro GRADE ( PAIRS )
            ($set GRADE-name  ($ (($PAIRS)) \list.($0 list)))
            ($set GRADE-value ($ (($PAIRS)) \list.($1 list)))
            ($set each-GRADE  ($range ($len (($PAIRS)) )))
        )

    ($! a quote – (`<quote>) )

        ($GRADE
            (`
                ( A 5 )
                ( B 4 )
                ( C 3 )
                ( D 2 )
                ( E 1 )
            )
        )

    ($! enclosing of source code into a loop with the reverse square brackets
        – ]<EOL> <text> <EOL>[ )

        ($each-GRADE \i.]
            int ($i GRADE-name) = ($i GRADE-value);

        [ )

    int A = 5;
    int B = 4;
    int C = 3;
    int D = 2;
    int E = 1;

    ($! source code enclosing with the double comma
        – ($<function>,,<text>,,<text>) )

        ($import stdlib)
        ($hex ($BB,,11000000,,11111111,,11101110))

    0xc0ffee

    ($! a string substitution – ($<string> <arguments>) )

        ($ "($0) = ($val)" \val ($round ($pi) 2) (`Pi))

    "Pi = 3.14"

    ($! a string evaluation – ($$<string> <arguments>) )

        ($ ($$'($($func) ($0) ($1))' \func (`mul) 5 5))

    25

    ($! an iterator (modifier) – ($emit <atom> <function>) – NOT applicable
        into a loop or a conditional expression – EXPERIMENTAL )

        ($set i 0)
        ($emit i inc) ($emit i inc) ($emit i dec) ($emit i)

    0 1 2 1

    ($! an iterator (modifier) of a list – ($emit <list>) )

        ($set list ($range 5 25 5))
        ($emit list) ($emit list) ($emit list) ($emit list)

    5 10 15 20

    ($! a late bound parameter – \<late>..\<param>.<expr> <argument &<late>> )

        ($ \func.\val.($func val) \param.($upper  param) "regular param")
        ($ \param..\func.\val.($func val) ($upper &param) "late bound param")

    "REGULAR PARAM"
    "LATE BOUND PARAM"

    ($! a variable argument list – \...<expr __va_args__> – EXPERIMENTAL )

        ($ \param1.\param2.\...($__va_args__) 1 2 3 4 5)

    345

        ($ \val.\...($ ($lazy __va_args__) \func.[($func val) ])
            9.0
            \n.($sqrt n)
            \n.{ 2 * n }
            \n.($pow n 2)
        )

    3.0 18.0 81.0

    ($! getting names of parameters from a list – \(<list>).<expr> )

        ($set params (x y))
        ($ \(params).{ x - y } 100 500)
        ($set params (y x))
        ($ \(params).{ x - y } 100 500)

    -400
    400

    ($! binding of a few atoms at once – ($set (<atoms>) <expr>) )

        ($set (b c d) ('B' 'C' 'D'))

    ($! an atom binding in an expression – ($let <atom> <expr>)
        or ($let (<atoms>) <expr>) )

        ($let (pow2 pow4) (\x.($mul x x) \x.($pow2 ($pow2 x))) ($pow2 ($pow4 2)))

    256

    Creating multiple files from the single source – `($__PASSAGE__ <list>)`:

        ($set __OUTPUT_FILE__ ($__PASSAGE__ ("a.txt" "b.txt" "c.txt")))
        File: ($__OUTPUT_FILE__)

    Any functions from "string", "operator" and "math" modules of Python
    Standard Library can be used in preprocessor expressions
    (https://github.com/in4lio/yupp/blob/master/doc/builtin.md).

    The special ($import <expr>) form is provided to include macros and
    functions from yupp Standard Library or other libraries
    (https://github.com/in4lio/yupp/blob/master/lib/README.md).

    ___       ____________________________________
    ___ USAGE ____________________________________

    yupp is written in Python, the main file is "yup.py". Source files
    for preprocessing are passed to yupp as command-line arguments, for
    example:

        python yup.py "./eg/hello.yu-c"

    In case [yupp package](https://pypi.python.org/pypi/yupp/) is installed,
    you can simply write:

        yupp "./eg/hello.yu-c"

    To learn more about the preprocessor parameters, please get help on
    the command-line interface:

        python yup.py -h | more

    The files generated by the preprocessor are getting other extensions
    that could come from the original, for example ".c" for ".yu-c".
    In failing to translate the preprocessor expressions into a plain text
    the evaluation result will be saved as ".ast" file.

    ___         __________________________________
    ___ EXAMPLE __________________________________

    First, we'll output the original source code of our example to the terminal:

    >cd yupp
    >more "./eg/hello.yu-c"

        ($set greeting "Hello world!\n")

        ($set name   (  Co       F              Zu           ))
        ($set type   (  float    double         float        ))
        ($set val    (  { pi }   (`acos( -1 ))  { 355/113 }  ))
        ($set format (  "%.2f"   "%.10f"        "%.6f"       ))

        ($set each-Pi ($range ($len name)))

        #include <math.h>
        #include <stdio.h>

        int main( void )
        {
            ($each-Pi \i.]
                ($i type) ($i name) = ($i val);

            [ )
            printf( ($greeting) );

            ($each-Pi \i.]
                ($set n ($i name))
                printf( ($"($0) = ($1)\n" ($n) ($unq ($i format))), ($n) );

            [ )
            return 0;
        }

    Then, we run the preprocessor with the name of this file as a parameter
    and the "-q" option to suppress the greeting:

    >python yup.py -q "./eg/hello.yu-c"

    Finally, we want to see the generated source code:

    >more "./eg/hello.c"

        #include <math.h>
        #include <stdio.h>

        int main( void )
        {
            float Co = 3.14159265359;
            double F = acos( -1 );
            float Zu = 3.14159292035;

            printf( "Hello world!\n" );

            printf( "Co = %.2f\n", Co );
            printf( "F = %.10f\n", F );
            printf( "Zu = %.6f\n", Zu );

            return 0;
        }

    Further examples:

        https://github.com/in4lio/yupp/tree/master/eg/

    ___                   ________________________
    ___ MACROS IN PYTHON  ________________________

    You need to install "yupp" package in order to use the macro processor
    with Python 2:

        pip install yupp

    You may need to specify "--pre" key if you want to install a beta
    version.

    After that, you can use macro expressions in source code in Python,
    starting your script with:

        # coding: yupp

    In addition, this package allows us to call yupp preprocessor from
    the command-line just by its name:

        yupp "file.yu-c"

    Read more:

        https://github.com/in4lio/yupp/tree/master/python/

    ___              _____________________________
    ___ SUBLIME TEXT _____________________________

    The folder "sublime_text" contains configuration files for comfortable
    usage of the preprocessor in Sublime Text 2 editor. In addition there is
    a plugin for quick navigation between the generated text and its origin.

    ___     ______________________________________
    ___ VIM ______________________________________

    Switching between the generated text and its origin in VIM editor is

        https://github.com/in4lio/vim-yupp (under development)

    ___         __________________________________
    ___ TESTKIT __________________________________

    yupp is currently in beta stage. The file called "test_yup.py" contains
    a number of smoke tests.

    The preprocessor still needs testing and optimization. Also you may run
    into problems with completing of the eval-apply cycle when used recursion
    or experimental features.

    ___     ______________________________________
    ___ WEB ______________________________________

    o   yupp Wiki:
        https://github.com/in4lio/yupp/wiki/

    o   yupp Blog:
        http://yup-py.blogspot.com/

    o   yupp Web Console:
        http://yup-py.appspot.com/

    ___          _________________________________
    ___ PROJECTS _________________________________

    o   LEGO MINDSTORMS EV3 Debian C library:
        https://github.com/in4lio/ev3dev-c/

    o   predict – an embedded application framework:
        https://github.com/in4lio/predict/

    ___     ______________________________________
    ___ GIT ______________________________________

    Enter in the following on your command-line to clone yupp repository:

        git clone https://github.com/in4lio/yupp.git

    ___         __________________________________
    ___ CONTACT __________________________________

    Please feel free to contact me at in4lio+yupp@gmail.com if you have
    any questions about the preprocessor.
