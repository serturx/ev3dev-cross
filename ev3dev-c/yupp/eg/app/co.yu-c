($import "app.yu")
($TITLE,,Coroutines implementation.)

($import "config.yu")
($import h)
($import corolib)

($implement-named)

#include <stdio.h>
#include "co.h"

static semaphore_t eol;

#define SQ  19  /* odd, square side length */
static int spiral[ SQ * SQ ] = { 0 };

void init_spiral( void )
{
	const int dp[ 4 ] = { -SQ, -1, SQ, 1 };  /* step up, left, down and right */
	int p = SQ * SQ / 2;  /* position in spiral */
	int n = 2;  /* current number */
	int lch = 3;  /* chain length */
	int i, ii;

	spiral[ p ] = 1;
	spiral[ ++p ] = 2;
	while ( n < SQ * SQ ) {
		for ( i = 0; i < 4; i++ ) {  /* up-left-down-right cycle */
			for ( ii = 0; ii < lch >> 1; ii++ ) {  /* chain cycle */
				p += dp[ i ];
				spiral[ p ] = ++n;
			}
			++lch; /* chain grows up every second turn */
		}
	}
}

int isprime( int n )
{
	int i;

	if ( n == 2 ) return 1;
	if ( n == 1 || n % 2 == 0 ) return 0;
	for ( i = 3; i * i <= n; i += 2 ) if (( n % i ) == 0 ) return 0;
	return 1;
}

int A_init( void )
{
	init_spiral();
	return ( CO_READY );
}

void A_uninit( void )
{

}

($coro-define A ]
	for ( i = 0; i < SQ * SQ; i++ ) {
		/* ulam spiral */
		if ( isprime( spiral[ i ])) {
			printf( "%03d", spiral[ i ]);
		} else {
			printf( " . " );
		}
		($coro-yield);
	}
[ \enter ]
	($coro-local) int i;
[ )

int B_init( void )
{
	return ( CO_READY );
}

void B_uninit( void )
{

}

($coro-define B ]
	while ( ($coro-alive A_alive) ) {
		($semaphore-acquire eol);
		for ( i = 0; i < SQ - 1; i++ ) {
			/* spacing */
			printf( " " );
			($coro-yield);
		}
		($semaphore-release eol);
		($coro-yield);
	}
[ \enter ]
	($coro-local) int i;
[ )

int C_init( void )
{
	($semaphore-init eol 1);
	return ( CO_READY );
}

void C_uninit( void )
{

}

($coro-define C ]
	while ( ($coro-alive A_alive) ) {
		($semaphore-acquire eol);
		/* line breaking */
		printf( "\n" );
		($semaphore-release eol);
		($coro-yield);
	}
[ )
