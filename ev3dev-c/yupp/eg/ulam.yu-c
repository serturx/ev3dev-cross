($__TITLE__)

($import corolib)

#include <stdio.h>

($coro-h)

#define SQ  19  /* odd, square side length */
static int spiral[ SQ * SQ ] = { 0 };

#define	PR_NONE  0
#define	PR_EOL  -1
#define	PR_DOT  -2
static int number = PR_NONE;  /* current state or prime number */

void init_spiral( void )
{
	const int dp[ 4 ] = { -SQ, -1, SQ, 1 };  /* step up, left, down and right */
	int p = SQ * SQ / 2;  /* position in spiral */
	int n = 2;  /* current number */
	int lch = 3;  /* chain length */
	int i, ii;

	spiral[ p ] = 1;
	spiral[ ++p ] = 2;
	while ( n < SQ * SQ ) {
		for ( i = 0; i < 4; i++ ) {  /* up-left-down-right cycle */
			for ( ii = 0; ii < lch >> 1; ii++ ) {  /* chain cycle */
				p += dp[ i ];
				spiral[ p ] = ++n;
			}
			++lch; /* chain grows up every second turn */
		}
	}
}

int isprime( int n )
{
	int i;

	if ( n == 2 ) return 1;
	if ( n == 1 || n % 2 == 0 ) return 0;
	for ( i = 3; i * i <= n; i += 2 ) if (( n % i ) == 0 ) return 0;
	return 1;
}

/* Define coroutines */

($coro-define U ]
	for ( i = 0; i < SQ * SQ; i++ ) {
		number = spiral[ i ];

		if ( !isprime( number )) number = PR_DOT;
		($coro-yield);

		/* check line breaking */
		if (( i % SQ ) == ( SQ - 1 )) number = PR_EOL;
		($coro-yield);
	}
[ \enter ]
	($coro-local) int i;
[ )

($coro-define L ]
	for ( ; ; ) {
		($coro-wait,, number > PR_NONE );
		printf( "%03d ", number );
		number = PR_NONE;
	}
[ )

($coro-define A ]
	for ( ; ; ) {
		($coro-wait,, number == PR_DOT );
		printf( " .  " );
		number = PR_NONE;
	}
[ )

($coro-define M ]
	for ( ; ; ) {
		($coro-wait,, number == PR_EOL );
		printf( "\n" );
		number = PR_NONE;
	}
[ )

($dict D
	(` name )
	(`
	(  U    )
	(  L    )
	(  A    )
	(  M    )
	)
)

/* Print ULAM spiral */

int main( void )
{
	($each-D \i.]
		($coro-context ($i name)) = NULL;

	[ )
	init_spiral();
	while ( 1
		($each-D \i.]
			&& ($coro-alive ($coro-call ($i name)))

		[ )
	);
	return 0;
}
